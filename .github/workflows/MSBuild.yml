name: MSBuild

on:
  push:
    branches: [ main, stable/* ]
  pull_request:
    branches: [ main, stable/* ]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: src/SharpSvn.sln
  nant: '${{ github.workspace }}/src/packages/NAnt.0.92.0/tools/nant.exe'
  heimdal_path: 'imports/build/heimdal'
  MinGWPath: 'C:\msys64'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Git Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Checkout heimdal
      uses: actions/checkout@v2
      with:
        repository: matherm-aboehm/heimdal
        ref: matherm-aboehm/vs2017-support
        path: ${{ env.heimdal_path }}
        submodules: true

    - name: Get Commit SHA of heimdal
      id: heimdal
      working-directory: ${{ env.heimdal_path }}
      run: echo "::set-output name=sha::$(git rev-parse HEAD)"

    - name: Checkout heimdal/mkshim
      uses: actions/checkout@v2
      with:
        repository: matherm-aboehm/MKShim
        ref: vs2017-support
        path: ${{ env.heimdal_path }}/thirdparty/mkshim
        submodules: true

    - name: Get Commit SHA of mkshim
      id: mkshim
      working-directory: ${{ env.heimdal_path }}/thirdparty/mkshim
      run: echo "::set-output name=sha::$(git rev-parse HEAD)"

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1

    - name: Install NAnt
      run: nuget.exe install NAnt

    - name: Setup SHFB
      uses: matherm-aboehm/setup-SHFB@v1
      with:
        version: v2021.11.7.0

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: texinfo bison flex

    - name: Cache preparations
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          imports/release
          imports/build/refasmer
          !imports/release/bin-*
        key: ${{runner.os}}-MSBuild-${{ hashFiles('imports/*.build') }}-${{ hashFiles('imports/scripts/*.build') }}-${{ steps.heimdal.outputs.sha }}-${{ steps.mkshim.outputs.sha }}

    - name: Cache Import Downloads
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: |
          imports/downloads
        key: ${{runner.os}}-Import-Downloads-${{ hashFiles('imports/*.build') }}

    - name: Cache heimdal
      id: cache_heimdal
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.heimdal_path }}/out
        key: ${{runner.os}}-Heimdal-${{ steps.heimdal.outputs.sha }}-${{ steps.mkshim.outputs.sha }}
        
    - name: Build Heimdal-x86
      if: steps.cache.outputs.cache-hit != 'true' && steps.cache_heimdal.outputs.cache-hit != 'true'
      working-directory: ${{ env.heimdal_path }}
      run: msbuild /m /p:Platform=Win32 /p:Configuration=Debug "/p:MinGWPath=${{ env.MinGWPath }}\usr\bin" heimdal.vcxproj

    - name: Build Heimdal-x64
      if: steps.cache.outputs.cache-hit != 'true' && steps.cache_heimdal.outputs.cache-hit != 'true'
      working-directory: ${{ env.heimdal_path }}
      run: msbuild /m /p:Platform=x64 /p:Configuration=Debug "/p:MinGWPath=${{ env.MinGWPath }}\usr\bin" heimdal.vcxproj

    - name: Run NAnt preparations
      if: steps.cache.outputs.cache-hit != 'true'
      run: ${{env.nant}} -f:tools/buildbot.build "-D:heimdalDir=${{ github.workspace }}/${{ env.heimdal_path }}" buildbot-build

    - name: Download heimdal runtime
      id: download_heimdal
      uses: suisei-cn/actions-download-file@v1
      with:
        url: https://www.secure-endpoints.com/binaries/heimdal/Heimdal-AMD64-full-7-4-0-40.msi
        target: imports/downloads
    
    - name: Install heimdal runtime
      run: |
        Start-Process -Wait -FilePath "C:\Windows\system32\msiexec.exe" -ArgumentList "/i", "imports\downloads\${{ steps.download_heimdal.outputs.filename }}", "/quiet", "/l*", "imports\downloads\heimdal.log"
        type "imports\downloads\heimdal.log"
        echo "C:\Program Files (x86)\Heimdal\bin\;C:\Program Files\Heimdal\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Setup version
      run: scripts\gh-version-setup.cmd ${{ github.run_number }}

    - name: Run nuget
      run: nuget.exe restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build-x86
      run: msbuild.exe /r /v:m /p:Platform=x86 /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}} /p:BuildBotBuild=true @scripts\msbuild-version.rsp

    - name: Build-x64
      run: msbuild.exe /r /v:m /p:Platform=x64 /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}} /p:BuildBotBuild=true @scripts\msbuild-version.rsp

    - name: Build-x86-Core
      run: msbuild.exe /r /v:m /p:Platform=x86 /p:Configuration=ReleaseCore ${{env.SOLUTION_FILE_PATH}} /p:BuildBotBuild=true @scripts\msbuild-version.rsp

    - name: Build-x64-Core
      run: msbuild.exe /r /v:m /p:Platform=x64 /p:Configuration=ReleaseCore ${{env.SOLUTION_FILE_PATH}} /p:BuildBotBuild=true @scripts\msbuild-version.rsp

    - name: Build-arm64-Core
      run: msbuild.exe /r /v:m /p:Platform=ARM64 /p:Configuration=ReleaseCore ${{env.SOLUTION_FILE_PATH}} /p:BuildBotBuild=true @scripts\msbuild-version.rsp

    - name: VSTest-x86
      run: vstest.console.exe /Platform:x86 src/SharpSvn.Tests/bin/x86/Release/SharpSvn.Tests.dll "--testcasefilter:TestCategory!=NeedsNetwork"

    - name: VSTest-x64
      run: vstest.console.exe /Platform:x64 src/SharpSvn.Tests/bin/x64/Release/SharpSvn.Tests.dll "--testcasefilter:TestCategory!=NeedsNetwork"

    - name: VSTest-Core-x86
      run: vstest.console.exe /Platform:x86 src/SharpSvn.Tests/bin/x86/ReleaseCore/SharpSvn.Tests.dll "--testcasefilter:TestCategory!=NeedsNetwork"

    - name: VSTest-Core-x64
      run: vstest.console.exe /Platform:x64 src/SharpSvn.Tests/bin/x64/ReleaseCore/SharpSvn.Tests.dll "--testcasefilter:TestCategory!=NeedsNetwork"

    - name: Create nupkg files
      run: scripts\gh-build-nuget.cmd

    - name: Package nupkg files
      uses: actions/upload-artifact@v2
      with:
        name: nupkg-files
        path: nuspec/bin/*.nupkg
