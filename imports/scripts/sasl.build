<?xml version="1.0" ?>
<project basedir=".." default="build">
  <property name="saslDir" value="${platformRoot}/sasl" />

  <regex pattern="^(?'SASL_MAJOR_VERSION'\d+)\.(?'SASL_MINOR_VERSION'\d+)\.(?'SASL_MICRO_VERSION'\d+)" input="${saslVersion}" />

  <property name="saslDllName" value="libsasl.dll" />
  <property name="saslDllName" value="${dllPrefix}libsasl${SASL_MAJOR_VERSION}${SASL_MINOR_VERSION}.${svnDll}" if="${dllPrefix!=''}"/>
  <property name="heimdalOutDir" value="" />
  <property name="heimdalOutDir" value="${path::get-full-path(heimdalDir + '/out/dest_i386')}" if="${platform=='win32'}" />
  <property name="heimdalOutDir" value="${path::get-full-path(heimdalDir + '/out/dest_AMD64')}" if="${platform=='x64'}" />
  <property name="useHeimdal" value="true" />
  <property name="useHeimdal" value="false" if="${string::contains(string::to-upper(platform),'ARM')}" />
  <property name="gssAPIDefines" value="" />
  <property name="gssAPIDefines" value="/D GSSAPI_STATIC=1" if="${useHeimdal}" />
  <property name="gssAPISources" value="" />
  <property name="gssAPISources" value="../plugins/gssapi.c" if="${useHeimdal}" />
  <property name="gssAPIObjects" value="" />
  <property name="gssAPIObjects" value="../plugins/gssapi.obj" if="${useHeimdal}" />
  <property name="gssAPILibs32" value="/libpath:$(GSSAPI_LIBPATH) gssapi32.lib" />
  <property name="gssAPILibs64" value="/libpath:$(GSSAPI_LIBPATH) gssapi64.lib" />
  <property name="gssAPILibs" value="" />
  <property name="gssAPILibs" value="${gssAPILibs32}" if="${useHeimdal and platform=='win32'}" />
  <property name="gssAPILibs" value="${gssAPILibs64}" if="${useHeimdal and platform=='x64'}" />


  <target name="sasl-prepare" depends="checkout, bdb-build, openssl-build">
    <OnceBlock file="build/sasl-${saslVersion}_${platform}.prepared">
      <foreach item="File" property="patch">
        <in>
          <items basedir="${downloads}/../patches/sasl">
            <include name="*.patch" />
          </items>
        </in>
        <do>
          <Svn>
            <arg value="patch" />
            <arg value="${patch}" />
            <arg value="${saslDir}" />
          </Svn>
        </do>
      </foreach>
      <FilterFile file="${saslDir}/win32/include/config.h">
        <filterchain>
          <replacestring from='/* which mechs can we link staticly? */' to='#define STATIC_NTLM 1 /* Which mechs can we link staticly?  */ ' />
          <replacestring from='#define STATIC_OTP 1' to='/* #undef STATIC_OTP */' />
          <replacestring from='#define STATIC_SRP 1' to='/* #undef STATIC_SRP */' />
          <replacestring from='#define STATIC_GSSAPIV2 1' to='/* #undef STATIC_GSSAPIV2 */' unless="${useHeimdal}" />
          <replacestring from='typedef int ssize_t;' to='typedef INT_PTR ssize_t;' />
          <LineRegexReplace re='(#define snprintf .*)'
                         to='#if _MSC_VER &lt; 1900
$1
#endif' />
        </filterchain>
      </FilterFile>
      <echo message='

/* SharpSvn */
/* SharpSvn */
#include &lt;windows.h&gt;
#include &lt;winsock2.h&gt;
#include &lt;Ws2tcpip.h&gt;
#include &lt;wspiapi.h&gt;
/* /SharpSvn */

' file="${saslDir}/win32/include/config.h" append="true" />
      <FilterFile file="${saslDir}/win32/common.mak">
        <filterchain>
          <replacestring from='=/Wp64' to='=/D_CRT_SECURE_NO_DEPRECATE' />
        </filterchain>
      </FilterFile>
      <FilterFile file="${saslDir}/NTMakefile">
        <filterchain>
          <replacestring from='SUBDIRS=lib plugins utils sample' to='SUBDIRS=plugins lib' />
        </filterchain>
      </FilterFile>

      <FilterFile file="${saslDir}/include/prop.h" if="${static}" >
        <filterchain>
          <replacestring from='WIN32' to='no_WIN32_exports' />
        </filterchain>
      </FilterFile>
      <FilterFile file="${saslDir}/plugins/NTMakefile">
        <filterchain>
          <replacestring from='"afxres.h"' to='&lt;winresrc.h&gt;' />
          <replacestring from='CPPFLAGS = /I "..\win32\include"'
           to='CPPFLAGS = /Gy /Zi /Fd..\lib\libsasl.pdb /D _CRT_SECURE_NO_WARNINGS /D NEED_GETOPT /I "..\win32\include"' />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) /MACHINE:x64 /out' if="${platform=='x64'}" />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) /MACHINE:ARM64 /out' if="${platform=='ARM64'}" />
          <replacestring from='/D "WIN32"' to='/D "WIN32" /D "WIN64"' if="${platform!='win32'}" />
          <replacestring from='${gssAPILibs32}' to='${gssAPILibs64}' if="${platform=='x64'}" />
          <replacestring from='$(LINK32DLL_FLAGS)' to='$(LIB32_FLAGS)' />
          <replacestring from='$(LINK32DLL)' to='$(LIB32)' />
          <replacestring from='OPENSSL_LIBS=' to='OPENSSL_QQ_LIBS=' />
          <replacestring from='CyberSafe' to='Heimdal' if="${useHeimdal}" />
          <LineRegexReplace re='/implib:"sasl[A-Za-z0-9_]+\.lib" ' to='' />
          <LineRegexReplace re=' ([a-zA-Z0-9_]+)_init.(c|obj)' to='' />
          <LineRegexReplace re='(sasl[A-Z0-9a-z]+)_out\s*=\s*(\1).dll\s+(\1).exp\s*(\1).exp' to='$1_out = ' />
          <LineRegexReplace re='(sasl[A-Z0-9a-z]+).dll' to='$1.lib' />
        </filterchain>
      </FilterFile>

      <FilterFile file="${saslDir}/lib/NTMakefile">
        <filterchain>
          <replacestring from='"afxres.h"' to='&lt;winresrc.h&gt;' />
          <replacestring
            from='CPPFLAGS = /wd4996 /Wp64 /D NEED_GETOPT'
            to='CPPFLAGS = /Gy /Zi /Fdlibsasl.pdb /Zl /O1 /D NTLM_STATIC=1 ${gssAPIDefines} /D _CRT_SECURE_NO_WARNINGS /D NEED_GETOPT /wd4996 /I "$(OPENSSL_INCLUDE)"' />
          <replacestring from=' windlopen.c ' to=' dlopen.c ../plugins/ntlm.c ${gssAPISources} ../plugins/digestmd5.c ../plugins/crammd5.c ../plugins/login.c ../plugins/plain.c ../plugins/anonymous.c ../plugins/sasldb.c ../plugins/allockey.c ../plugins/db_berkeley.c ' />
          <replacestring from=' windlopen.obj ' to=' dlopen.obj ../plugins/ntlm.obj ${gssAPIObjects} ../plugins/digestmd5.obj ../plugins/cram.obj ../plugins/login.obj ../plugins/plain.obj ../plugins/anonymous.obj ../plugins/sasldb.obj ../plugins/allockey.obj ../plugins/db_berkeley.obj ' />
          <replacestring from='/D "WIN32"' to='/D "WIN32" /D "WIN64"' if="${platform!='win32'}" />
          <!-- Shared Library -->
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) /MACHINE:x64 /out' if="${platform=='x64'}" unless="${static}" />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) /MACHINE:ARM64 /out' if="${platform=='ARM64'}" unless="${static}" />
          <replacestring from='/implib:"libsasl.lib" /pdb:"libsasl.pdb" ' to='/implib:"libsasl.lib" /pdb:"libsasl.pdb" $(OPENSSL_LIBS) /libpath:$(DB_LIBPATH) $(DB_LIB) delayimp.lib /delayload:${fullDbDllName} /delayload:${libcryptoFullName} ' unless="${static}" />
          <replacestring from='libsasl.dll' to='${saslDllName}' if="${dllPrefix != ''}" unless="${static}" />
          <!-- Static library -->
          <replacestring from='$(LINK32DLL)' to='$(LIB32)' if="${static}" />
          <replacestring from='$(LINK32DLL_FLAGS)' to='$(LIB32_FLAGS) ${gssAPILibs}' if="${static}" />
          <replacestring from=' $(libsasl_res)' to='' if="${static}" />
          <replacestring from='/implib:"libsasl.lib" ' to='' if="${static}" />
          <replacestring from='libsasl.dll libsasl.exp libsasl.lib' to='libsasl.lib' if="${static}" />
          <replacestring from='libsasl.dll' to='libsasl.lib' if="${static}" />
          <replacestring from=' /Wp64 ' to=' /D_CRT_SECURE_NO_DEPRECATE ' />
        </filterchain>
      </FilterFile>
    </OnceBlock>
  </target>
  <target name="sasl-build" depends="sasl-prepare">
    <OnceBlock file="build/sasl-${saslVersion}_${platform}.build">
      <NMake workingdir="${saslDir}" makeFile="${saslDir}/NTMakefile">
        <arg value="TARGET_WIN_SYSTEM=51" />
        <!-- Win XP+ -->
        <arg value="STATIC=no" /><!-- Use shared CRT -->
        <!-- BDB -->
        <arg value="DB_LIB=${libDb}.lib" />
        <arg value="DB_INCLUDE=${path::get-full-path(intDir + '/include')}" />
        <arg value="DB_LIBPATH=${path::get-full-path(intDir + '/lib')}" />
        <!-- OpenSSL -->
        <arg value="OPENSSL_INCLUDE=${path::get-full-path(intDir + '/include')}" />
        <arg value="OPENSSL_LIBPATH=${path::get-full-path(intDir + '/lib')}" />
        <arg value="OPENSSL_LIBS=/libpath:${path::get-full-path(intDir + '/lib')} ${libcryptoName} ${libsslName}" />
        <arg value="NTLM=1" />
        <arg value="NTLM_STATIC=1" />
        <arg value="GSSAPI=Heimdal" if="${useHeimdal}" />
        <arg value="GSSAPI_STATIC=1" if="${useHeimdal}" />
        <!-- Use compatibility layer -->
        <arg value="GSSAPI_INCLUDE=${path::get-full-path(heimdalDir + '/thirdparty/mkshim/mit-include')}" if="${useHeimdal}" />
        <arg value="GSSAPI_LIBPATH=${path::get-full-path(heimdalOutDir + '/lib')}" if="${useHeimdal}" />
        <arg value="LIB32=lib.exe /nologo" />
      </NMake>
      <!-- VS2005 and VS2008 binaries need a manifest -->
      <exec program="mt.exe" workingdir="${saslDir}/lib" unless="${static}" if="${not vcxproj}">
        <arg value="-manifest" />
        <arg value="${saslDllName}.manifest" />
        <arg value="-outputresource:${saslDllName};2" />
      </exec>
    </OnceBlock>
    <copy todir="${intDir}/lib">
      <fileset basedir="${saslDir}/lib">
        <include name="libsasl.lib" />
        <include name="libsasl.pdb" if="${static}" />
      </fileset>
    </copy>
    <copy todir="${intDir}/include">
      <fileset basedir="${saslDir}/include">
        <include name="**/*.h" />
      </fileset>
    </copy>
    <copy todir="${intDir}/bin">
      <fileset basedir="${saslDir}/lib">
        <include name="${saslDllName}" />
        <include name="libsasl.pdb" />
      </fileset>
    </copy>
    <mkdir dir="${release}/include/sasl" />
    <copy todir="${release}/include/sasl">
      <fileset basedir="${saslDir}/include">
        <include name="**/*.h" />
      </fileset>
    </copy>
  </target>
</project>
